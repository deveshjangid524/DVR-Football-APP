merged_data <- read.csv("merged_data.csv")
library(readr)
attempts_goals_merged <- read_csv("F:/attempts_goals_merged.csv")
View(attempts_goals_merged)
library(readr)
merged_data <- read_csv("F:/merged_data.csv")
View(merged_data)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
install.packages("shinydashboard")
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
View(attempts_goals_merged)
# Rename column using colnames()
colnames(merged_data)[colnames(merged_data) == "cross_complted"] <- "cross_completed"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
# Rename the column 'cross_complted' to 'cross_completed' in merged_data
colnames(merged_data)[which(colnames(merged_data) == "cross_complted")] <- "cross_completed"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(readr)
defending <- read_csv("F:/defending.csv")
View(defending)
View(defending)
defending_data <- defending
rm(defending)  # Optional: Remove the original dataset
View(defending_data)
runApp()
runApp()
View(merged_data)
View(merged_data)
View(defending_data)
colnames(merged_data)
sum(is.na(merged_data$pass_accuracy))
class(merged_data$pass_accuracy)
str(merged_data[c("pass_accuracy", "pass_attempted", "pass_completed", "assists")])
model <- lm(assists ~ pass_accuracy + pass_attempted + pass_completed, data = merged_data)
summary(model)
# Check structure of merged_data
print("Structure of merged_data:")
print(str(merged_data))
# Ensure no missing values in model predictors
print("Check for NA in predictors:")
print(colSums(is.na(merged_data[c("pass_accuracy", "pass_attempted", "pass_completed")])))
# Ensure predictors are numeric
print("Data types of predictors:")
print(sapply(merged_data[c("pass_accuracy", "pass_attempted", "pass_completed")], class))
# Run the model directly
model <- lm(assists ~ pass_accuracy + pass_attempted + pass_completed, data = merged_data)
print(summary(model))
print("Selected players data:")
print(colnames(selected_players()))
runApp()
runApp()
runApp()
View(model)
print(str(attempts_goals_merged))
print(head(attempts_goals_merged))
model <- lm(goals ~ total_attempts + on_target + off_target + blocked, data = attempts_goals_merged)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(merged_data)
colnames(attempts_goals_merged)
runApp()
runApp()
runApp()
# Check column names with no spaces or hidden characters
colnames(merged_data)  # Check column names of merged_data
colnames(attempts_goals_merged)  # Check column names of attempts_goals_merged
# Clean column names by removing extra spaces or special characters
colnames(merged_data) <- make.names(colnames(merged_data))
colnames(attempts_goals_merged) <- make.names(colnames(attempts_goals_merged))
# Now, check the columns again
colnames(merged_data)
colnames(attempts_goals_merged)
runApp()
merged_data <- read.csv("merged_data.csv", stringsAsFactors = FALSE)
attempts_goals_merged <- read.csv("attempts_goals_merged.csv", stringsAsFactors = FALSE)
# Check column names after reading the dataset
colnames(merged_data)
colnames(attempts_goals_merged)
runApp()
str(merged_data)  # Check data types in merged_data
str(attempts_goals_merged)  # Check data types in attempts_goals_merged
print(head(current_dataset()))
runApp()
runApp()
head(merged_data)
runApp()
runApp()
View(merged_data)
colnames(merged_data)
colnames(attemps_goals_merged)
colnames(attempts_goals_merged)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
